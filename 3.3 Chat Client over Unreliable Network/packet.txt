
                                1  1  1  1  1  1  1  1  1  1  2  2  2  2
  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|        CRC            |         MSG ID        |   PT   |       Z      |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                                                                       |
/                                MESSAGE                                /
|                                                                       |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

where:

CRC             A 8 bit crc of the whole encrypted packet except the crc
                field. Can be front padded with zero's.
MSG ID:         A 8 bit value representing a message id
PACKET TYPE:    A 3 bit field that specifies whether this packet is a
                normal message (0), an acknowledgment (1), Diffie Hellman
                parameter send (2), Diffie Hellman parameter request(3),
                or disconnect (4).
Z:              Reserved for the future. Should be 0'd out.
MESSAGE:        A variable length message ending in '\n'.

BYTE STUFFING:
Because sometimes a "\n" byte might be in the message, we have to somehow escape it.
Let 0x00 be the escape byte and we replace \n by 0x00|0x01:
If we want to send 0x00 we send 0x00|0x00
If we want to send \n we send 0x00|0x01
If we want to send 0x01 we send 0x01
If we want to send the sequence 0x00|0x01 we send 0x00|0x00|0x01